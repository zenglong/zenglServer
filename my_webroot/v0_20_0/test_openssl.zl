use builtin,openssl;
def RSA_PUBLIC 1;
def RSA_PRIVATE 0;
def RSA_PKCS1_PADDING 0;

def RSA_SIGN_SHA1 1;

def TRUE 1;
def FALSE 0;

def NULL 0;

def DUMP_CHAR 3;
def DUMP_HEX 2;
def DUMP_OCTAL 4;

// 判断是命令行模式，还是普通的web模式，如果是普通的web模式，则将br设置为<br/>即html格式的换行标签
if(bltIsRunInCmd())
	bltSetImmediatePrint(TRUE);
	print 'now in cmd';
	is_cmd = TRUE;
	br = '';
else
	is_cmd = FALSE;
	br = '<br/>';
	print 'now in website' + br;
endif

// 退出脚本并打印相应的信息
fun exit(msg)
	global is_cmd,br;
	print msg + br;
	bltExit();
endfun

// 从文件中读取rsa密钥key，并返回密钥key相关的资源指针，is_public表示读取的是公钥还是私钥，password表示密钥密码(如果密钥经过了加密处理，则需要提供相关的密码)
fun read_rsa_key(file, is_public, password = '')
	global is_cmd,br;
	ret = bltReadFile(file, &key_content, &file_size);
	if(ret == 0)
		print file + ' file size: ' + file_size + br;
		if(password)
			key = opensslReadKey(key_content, is_public, password);
		else
			key = opensslReadKey(key_content, is_public);
		endif
		if(key == NULL)
			exit('read key "'+ file +'" failed: ' + opensslGetError());
		endif
		print 'key:' + key + br;
		return key;
	else
		exit('read '+file+' failed, maybe the file does not exists, or open failed.');
	endif
endfun

// 打印分隔符
fun print_header()
	global is_cmd,br;
	if(is_cmd)
		print '\n=======================================\n';
	else
		print br + '=======================================' + br + br;
	endif
endfun

// 当pub_pri为public时，执行公钥加密，私钥解密，否则执行私钥加密，公钥解密
fun encrypt_and_decrypt(pub_pri, str, key, p_key, decrypt_to_str = TRUE, use_block = FALSE)
	global is_cmd,br;
	print_header();

	if(pub_pri == 'public')
		if(use_block)
			enc_len = opensslPublicEncrypt(str, -1, key, &enc, RSA_PKCS1_PADDING, FALSE, use_block);
		else
			enc_len = opensslPublicEncrypt(str, -1, key, &enc);
		endif
	else
		enc_len = opensslPrivateEncrypt(str, -1, p_key, &enc, RSA_PKCS1_PADDING, FALSE, use_block);
	endif	
	if(enc_len == -1)
		exit(pub_pri + ' encrypt failed: ' + opensslGetError());
	endif

	file_name = pub_pri + '_enc.data';
	bltWriteFile(file_name, enc, enc_len);
	bltReadFile(file_name, &file_data, &file_size, &file_data_ptr);
	print file_name + ' - size:' + file_size + br;
	print file_name + ' - data:' + bltDumpPtrData(file_data_ptr, file_size, DUMP_HEX) + br;

	if(pub_pri == 'public')
		dec_len = opensslPrivateDecrypt(file_data_ptr, file_size, p_key, &dec, RSA_PKCS1_PADDING, decrypt_to_str, use_block);
	else
		dec_len = opensslPublicDecrypt(file_data_ptr, file_size, key, &dec, RSA_PKCS1_PADDING, decrypt_to_str, use_block);
	endif

	if(dec_len == -1)
		exit(pub_pri + ' decrypt failed: ' + opensslGetError());
	endif
	print 'decrypt_to_str: ' + decrypt_to_str + br;
	print 'dec_len:' + dec_len + br;
	if(decrypt_to_str)
		print 'dec:' + dec + br;
	else
		print 'dec ptr:' + dec + br;
		print 'dec ptr data:' + bltDumpPtrData(dec, dec_len, DUMP_CHAR) + br;
		bltFree(dec);
	endif

	bltFree(enc);
endfun

// 执行RSA签名和验签操作
fun sign_verify(str, p_key, verify_str, key, print_sign = TRUE, sign_type = RSA_SIGN_SHA1)
	global is_cmd,br;
	if(print_sign)
		print_header();
	endif

	ret = opensslSign(str, -1, p_key, &sign, &sign_len, sign_type);
	if(!ret)
		exit('sign failed: ' + opensslGetError());
	endif

	if(print_sign)
		print 'sign len: ' + sign_len + br;
		print 'sign data: ' + bltDumpPtrData(sign, sign_len, DUMP_HEX) + br;
	endif

	ret = opensslVerify(verify_str, -1, key, sign, sign_len, sign_type);
	print verify_str + ' - verify :' + (ret ? 'True' : 'False') + br;

	bltFree(sign);
endfun

// 下面读取公钥key，私钥key以及加密的私钥key
key = read_rsa_key('rsa_public.key', RSA_PUBLIC);
p_key = read_rsa_key('rsa_private.key', RSA_PRIVATE);
p_aes_key = read_rsa_key('rsa_aes_private.key', RSA_PRIVATE, '111111');

// 下面通过encrypt_and_decrypt测试RSA加密解密

encrypt_and_decrypt('public', 'hello world!', key, p_key);

encrypt_and_decrypt('private', '!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!', key, p_aes_key, TRUE, TRUE);

encrypt_and_decrypt('public', 'hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!', key, p_key, TRUE, TRUE);

encrypt_and_decrypt('private', '!!! hello world! other test!!!', key, p_aes_key);
encrypt_and_decrypt('private2', '!!! hello world! hahaha ~~~', key, p_aes_key, FALSE);

// 下面通过sign_verify测试RSA签名和验签
sign_str = "hello world test sign!";
sign_verify(sign_str, p_key, "hello world test sign!", key);
sign_verify(sign_str, p_key, "hello world!", key, FALSE);

// 释放掉密钥key
opensslFreeKey(key, p_key, p_aes_key);

