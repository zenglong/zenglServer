use builtin,openssl;
def RSA_PUBLIC 1;
def RSA_PRIVATE 0;
def RSA_PKCS1_PADDING 0;

def RSA_SIGN_SHA1 1;

def TRUE 1;
def FALSE 0;

def NULL 0;

def DUMP_CHAR 3;
def DUMP_HEX 2;
def DUMP_OCTAL 4;

if(bltIsRunInCmd())
	bltSetImmediatePrint(TRUE);
	print 'now in cmd';
	is_cmd = TRUE;
	br = '';
else
	is_cmd = FALSE;
	br = '<br/>';
	print 'now in website' + br;
endif

fun exit(msg)
	global is_cmd,br;
	print msg + br;
	bltExit();
endfun

fun read_rsa_key(file, is_public, password = '')
	global is_cmd,br;
	ret = bltReadFile(file, &key_content, &file_size);
	if(ret == 0)
		print file + ' file size: ' + file_size + br;
		if(password)
			key = opensslReadKey(key_content, is_public, password);
		else
			key = opensslReadKey(key_content, is_public);
		endif
		if(key == NULL)
			exit('read key "'+ file +'" failed: ' + opensslGetError());
		endif
		print 'key:' + key + br;
		return key;
	else
		exit('read '+file+' failed, maybe the file does not exists, or open failed.');
	endif
endfun

fun print_header()
	global is_cmd,br;
	if(is_cmd)
		print '\n=======================================\n';
	else
		print br + '=======================================' + br + br;
	endif
endfun

fun encrypt_and_decrypt(pub_pri, str, key, p_key, decrypt_to_str = TRUE, use_block = FALSE)
	global is_cmd,br;
	print_header();

	if(pub_pri == 'public')
		if(use_block)
			enc_len = opensslPublicEncrypt(str, -1, key, &enc, RSA_PKCS1_PADDING, FALSE, use_block);
		else
			enc_len = opensslPublicEncrypt(str, -1, key, &enc);
		endif
	else
		enc_len = opensslPrivateEncrypt(str, -1, p_key, &enc, RSA_PKCS1_PADDING, FALSE, use_block);
	endif	
	if(enc_len == -1)
		exit(pub_pri + ' encrypt failed: ' + opensslGetError());
	endif

	file_name = pub_pri + '_enc.data';
	bltWriteFile(file_name, enc, enc_len);
	bltReadFile(file_name, &file_data, &file_size, &file_data_ptr);
	print file_name + ' - size:' + file_size + br;
	print file_name + ' - data:' + bltDumpPtrData(file_data_ptr, file_size, DUMP_HEX) + br;

	if(pub_pri == 'public')
		dec_len = opensslPrivateDecrypt(file_data_ptr, file_size, p_key, &dec, RSA_PKCS1_PADDING, decrypt_to_str, use_block);
	else
		dec_len = opensslPublicDecrypt(file_data_ptr, file_size, key, &dec, RSA_PKCS1_PADDING, decrypt_to_str, use_block);
	endif

	if(dec_len == -1)
		exit(pub_pri + ' decrypt failed: ' + opensslGetError());
	endif
	print 'decrypt_to_str: ' + decrypt_to_str + br;
	print 'dec_len:' + dec_len + br;
	if(decrypt_to_str)
		print 'dec:' + dec + br;
	else
		print 'dec ptr:' + dec + br;
		print 'dec ptr data:' + bltDumpPtrData(dec, dec_len, DUMP_CHAR) + br;
		bltFree(dec);
	endif

	bltFree(enc);
endfun

fun sign_verify(str, p_key, verify_str, key, print_sign = TRUE, sign_type = RSA_SIGN_SHA1)
	global is_cmd,br;
	if(print_sign)
		print_header();
	endif

	ret = opensslSign(str, -1, p_key, &sign, &sign_len, sign_type);
	if(!ret)
		exit('sign failed: ' + opensslGetError());
	endif

	if(print_sign)
		print 'sign len: ' + sign_len + br;
		print 'sign data: ' + bltDumpPtrData(sign, sign_len, DUMP_HEX) + br;
	endif

	ret = opensslVerify(verify_str, -1, key, sign, sign_len, sign_type);
	print verify_str + ' - verify :' + (ret ? 'True' : 'False') + br;

	bltFree(sign);
endfun

key = read_rsa_key('rsa_public.key', RSA_PUBLIC);
p_key = read_rsa_key('rsa_private.key', RSA_PRIVATE);
p_aes_key = read_rsa_key('rsa_aes_private.key', RSA_PRIVATE, '111111');

encrypt_and_decrypt('public', 'hello world!', key, p_key);

encrypt_and_decrypt('private', '!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!!!! hello world! other test!!!', key, p_aes_key, TRUE, TRUE);

encrypt_and_decrypt('public', 'hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!hello world!', key, p_key, TRUE, TRUE);

encrypt_and_decrypt('private', '!!! hello world! other test!!!', key, p_aes_key);
encrypt_and_decrypt('private2', '!!! hello world! hahaha ~~~', key, p_aes_key, FALSE);

sign_str = "hello world test sign!";
sign_verify(sign_str, p_key, "hello world test sign!", key);
sign_verify(sign_str, p_key, "hello world!", key, FALSE);

opensslFreeKey(key, p_key, p_aes_key);

